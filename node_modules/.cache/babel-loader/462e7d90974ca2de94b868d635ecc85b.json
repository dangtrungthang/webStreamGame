{"ast":null,"code":"\"use strict\";\n/**\r\n * restyleForInlineText.tsx\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * When a ReactXP component appears as a child of an RX.Text, it needs to be styled\r\n * specially so that it appears inline with the text rather than introducing line\r\n * breaks.\r\n *\r\n * This utility restyles the component that is passed to it as inline so it flows\r\n * with the text. When a ReactXP component is a child of a text, pass the return value\r\n * of its render method to this utility. See RX.View for an example.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar assert_1 = require(\"../../common/assert\");\n\nvar lodashMini_1 = require(\"./../utils/lodashMini\");\n\nfunction restyleForInlineText(reactElement) {\n  var style = reactElement.props.style;\n  assert_1.default(style && style.width !== undefined && style.height !== undefined, 'Children of an <RX.Text> must have a defined height and width');\n  /*\r\n    We'll use display: inline-block for inline element because\r\n    inline-flex will introduce new lines into the text that is\r\n    copied to the clipboard. In most our use-cases inline-block\r\n    is fine and should behave same as inline-flex.\r\n      Example:\r\n      <flex>\r\n        <inline> // InlineView\r\n          <inline text node>\r\n          <inline-flex> // set by this function - will introduce new line when copied\r\n            <inline transparent text with emoticon text representation>\r\n            <inline-block sprite clipping element>\r\n              <inline-block sprite background texture>\r\n          <inline text node>\r\n        result into selection: \"[text node][transparent text][new line][text node]\"\r\n      with inline-block this will properly resolve as \"[text node][transparent text][text node]\"\r\n  */\n\n  return React.cloneElement(reactElement, {\n    style: lodashMini_1.assign({}, style, {\n      display: 'inline-block',\n      // Reset the line height so the value from outside\n      // the inlined item doesn't cascade into this element.\n      lineHeight: 'normal'\n    })\n  });\n}\n\nexports.default = restyleForInlineText;","map":{"version":3,"sources":["/Users/dangthang/Desktop/webStreamGame/node_modules/react-ult/dist/web/utils/restyleForInlineText.js"],"names":["Object","defineProperty","exports","value","React","require","assert_1","lodashMini_1","restyleForInlineText","reactElement","style","props","default","width","undefined","height","cloneElement","assign","display","lineHeight"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;AAcAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,uBAAD,CAA1B;;AACA,SAASG,oBAAT,CAA8BC,YAA9B,EAA4C;AACxC,MAAIC,KAAK,GAAGD,YAAY,CAACE,KAAb,CAAmBD,KAA/B;AACAJ,EAAAA,QAAQ,CAACM,OAAT,CAAiBF,KAAK,IAClBA,KAAK,CAACG,KAAN,KAAgBC,SADH,IAEbJ,KAAK,CAACK,MAAN,KAAiBD,SAFrB,EAEgC,+DAFhC;AAGA;;;;;;;;;;;;;;;;;;AAmBA,SAAOV,KAAK,CAACY,YAAN,CAAmBP,YAAnB,EAAiC;AACpCC,IAAAA,KAAK,EAAEH,YAAY,CAACU,MAAb,CAAoB,EAApB,EAAwBP,KAAxB,EAA+B;AAClCQ,MAAAA,OAAO,EAAE,cADyB;AAElC;AACA;AACAC,MAAAA,UAAU,EAAE;AAJsB,KAA/B;AAD6B,GAAjC,CAAP;AAQH;;AACDjB,OAAO,CAACU,OAAR,GAAkBJ,oBAAlB","sourcesContent":["\"use strict\";\r\n/**\r\n * restyleForInlineText.tsx\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * When a ReactXP component appears as a child of an RX.Text, it needs to be styled\r\n * specially so that it appears inline with the text rather than introducing line\r\n * breaks.\r\n *\r\n * This utility restyles the component that is passed to it as inline so it flows\r\n * with the text. When a ReactXP component is a child of a text, pass the return value\r\n * of its render method to this utility. See RX.View for an example.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar assert_1 = require(\"../../common/assert\");\r\nvar lodashMini_1 = require(\"./../utils/lodashMini\");\r\nfunction restyleForInlineText(reactElement) {\r\n    var style = reactElement.props.style;\r\n    assert_1.default(style &&\r\n        style.width !== undefined &&\r\n        style.height !== undefined, 'Children of an <RX.Text> must have a defined height and width');\r\n    /*\r\n      We'll use display: inline-block for inline element because\r\n      inline-flex will introduce new lines into the text that is\r\n      copied to the clipboard. In most our use-cases inline-block\r\n      is fine and should behave same as inline-flex.\r\n\r\n      Example:\r\n        <flex>\r\n          <inline> // InlineView\r\n            <inline text node>\r\n            <inline-flex> // set by this function - will introduce new line when copied\r\n              <inline transparent text with emoticon text representation>\r\n              <inline-block sprite clipping element>\r\n                <inline-block sprite background texture>\r\n            <inline text node>\r\n\r\n        result into selection: \"[text node][transparent text][new line][text node]\"\r\n        with inline-block this will properly resolve as \"[text node][transparent text][text node]\"\r\n    */\r\n    return React.cloneElement(reactElement, {\r\n        style: lodashMini_1.assign({}, style, {\r\n            display: 'inline-block',\r\n            // Reset the line height so the value from outside\r\n            // the inlined item doesn't cascade into this element.\r\n            lineHeight: 'normal',\r\n        }),\r\n    });\r\n}\r\nexports.default = restyleForInlineText;\r\n"]},"metadata":{},"sourceType":"script"}