{"ast":null,"code":"\"use strict\";\n/**\r\n * Clipboard.tsx\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * Web-specific implementation of the cross-platform Clipboard abstraction.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Clipboard = void 0;\n\nvar RX = require(\"../common/Interfaces\");\n\nvar Clipboard =\n/** @class */\nfunction (_super) {\n  __extends(Clipboard, _super);\n\n  function Clipboard() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Clipboard.prototype.setText = function (text) {\n    var node = Clipboard._createInvisibleNode();\n\n    node.value = text;\n    document.body.appendChild(node);\n\n    Clipboard._copyNode(node);\n\n    document.body.removeChild(node);\n  };\n\n  Clipboard.prototype.getText = function () {\n    // Not supported in web platforms. This should can be only handled\n    // in the paste event handlers.\n    return Promise.reject('Not supported on web');\n  };\n\n  Clipboard._createInvisibleNode = function () {\n    var node = document.createElement('textarea');\n    node.style.position = 'absolute';\n    node.style.left = '-10000px';\n    node.style.width = '10px'; // Use the same vertical position as the current page\n    // to avoid scrolling on iOS Safari.\n\n    var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n    node.style.top = yPosition + 'px';\n    node.readOnly = true;\n    return node;\n  };\n\n  Clipboard._copyNode = function (node) {\n    node.select();\n    node.setSelectionRange(0, node.value.length);\n    document.execCommand('copy');\n    var selection = window.getSelection();\n\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  };\n\n  return Clipboard;\n}(RX.Clipboard);\n\nexports.Clipboard = Clipboard;\nexports.default = new Clipboard();","map":{"version":3,"sources":["/Users/trungthang/Documents/webStreamGame/node_modules/react-ult/dist/web/Clipboard.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__","constructor","create","defineProperty","exports","value","Clipboard","RX","require","_super","apply","arguments","setText","text","node","_createInvisibleNode","document","body","appendChild","_copyNode","removeChild","getText","Promise","reject","createElement","style","position","left","width","yPosition","window","pageYOffset","documentElement","scrollTop","top","readOnly","select","setSelectionRange","length","execCommand","selection","getSelection","removeAllRanges","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASS,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBX,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAb,IAAiCS,EAAE,CAACH,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIG,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaAR,MAAM,CAACW,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,sBAAD,CAAhB;;AACA,IAAIF,SAAS;AAAG;AAAe,UAAUG,MAAV,EAAkB;AAC7CrB,EAAAA,SAAS,CAACkB,SAAD,EAAYG,MAAZ,CAAT;;AACA,WAASH,SAAT,GAAqB;AACjB,WAAOG,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDL,EAAAA,SAAS,CAACT,SAAV,CAAoBe,OAApB,GAA8B,UAAUC,IAAV,EAAgB;AAC1C,QAAIC,IAAI,GAAGR,SAAS,CAACS,oBAAV,EAAX;;AACAD,IAAAA,IAAI,CAACT,KAAL,GAAaQ,IAAb;AACAG,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BJ,IAA1B;;AACAR,IAAAA,SAAS,CAACa,SAAV,CAAoBL,IAApB;;AACAE,IAAAA,QAAQ,CAACC,IAAT,CAAcG,WAAd,CAA0BN,IAA1B;AACH,GAND;;AAOAR,EAAAA,SAAS,CAACT,SAAV,CAAoBwB,OAApB,GAA8B,YAAY;AACtC;AACA;AACA,WAAOC,OAAO,CAACC,MAAR,CAAe,sBAAf,CAAP;AACH,GAJD;;AAKAjB,EAAAA,SAAS,CAACS,oBAAV,GAAiC,YAAY;AACzC,QAAID,IAAI,GAAGE,QAAQ,CAACQ,aAAT,CAAuB,UAAvB,CAAX;AACAV,IAAAA,IAAI,CAACW,KAAL,CAAWC,QAAX,GAAsB,UAAtB;AACAZ,IAAAA,IAAI,CAACW,KAAL,CAAWE,IAAX,GAAkB,UAAlB;AACAb,IAAAA,IAAI,CAACW,KAAL,CAAWG,KAAX,GAAmB,MAAnB,CAJyC,CAKzC;AACA;;AACA,QAAIC,SAAS,GAAGC,MAAM,CAACC,WAAP,IAAsBf,QAAQ,CAACgB,eAAT,CAAyBC,SAA/D;AACAnB,IAAAA,IAAI,CAACW,KAAL,CAAWS,GAAX,GAAiBL,SAAS,GAAG,IAA7B;AACAf,IAAAA,IAAI,CAACqB,QAAL,GAAgB,IAAhB;AACA,WAAOrB,IAAP;AACH,GAXD;;AAYAR,EAAAA,SAAS,CAACa,SAAV,GAAsB,UAAUL,IAAV,EAAgB;AAClCA,IAAAA,IAAI,CAACsB,MAAL;AACAtB,IAAAA,IAAI,CAACuB,iBAAL,CAAuB,CAAvB,EAA0BvB,IAAI,CAACT,KAAL,CAAWiC,MAArC;AACAtB,IAAAA,QAAQ,CAACuB,WAAT,CAAqB,MAArB;AACA,QAAIC,SAAS,GAAGV,MAAM,CAACW,YAAP,EAAhB;;AACA,QAAID,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACE,eAAV;AACH;AACJ,GARD;;AASA,SAAOpC,SAAP;AACH,CAvC8B,CAuC7BC,EAAE,CAACD,SAvC0B,CAA/B;;AAwCAF,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACuC,OAAR,GAAkB,IAAIrC,SAAJ,EAAlB","sourcesContent":["\"use strict\";\r\n/**\r\n * Clipboard.tsx\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * Web-specific implementation of the cross-platform Clipboard abstraction.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Clipboard = void 0;\r\nvar RX = require(\"../common/Interfaces\");\r\nvar Clipboard = /** @class */ (function (_super) {\r\n    __extends(Clipboard, _super);\r\n    function Clipboard() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Clipboard.prototype.setText = function (text) {\r\n        var node = Clipboard._createInvisibleNode();\r\n        node.value = text;\r\n        document.body.appendChild(node);\r\n        Clipboard._copyNode(node);\r\n        document.body.removeChild(node);\r\n    };\r\n    Clipboard.prototype.getText = function () {\r\n        // Not supported in web platforms. This should can be only handled\r\n        // in the paste event handlers.\r\n        return Promise.reject('Not supported on web');\r\n    };\r\n    Clipboard._createInvisibleNode = function () {\r\n        var node = document.createElement('textarea');\r\n        node.style.position = 'absolute';\r\n        node.style.left = '-10000px';\r\n        node.style.width = '10px';\r\n        // Use the same vertical position as the current page\r\n        // to avoid scrolling on iOS Safari.\r\n        var yPosition = window.pageYOffset || document.documentElement.scrollTop;\r\n        node.style.top = yPosition + 'px';\r\n        node.readOnly = true;\r\n        return node;\r\n    };\r\n    Clipboard._copyNode = function (node) {\r\n        node.select();\r\n        node.setSelectionRange(0, node.value.length);\r\n        document.execCommand('copy');\r\n        var selection = window.getSelection();\r\n        if (selection) {\r\n            selection.removeAllRanges();\r\n        }\r\n    };\r\n    return Clipboard;\r\n}(RX.Clipboard));\r\nexports.Clipboard = Clipboard;\r\nexports.default = new Clipboard();\r\n"]},"metadata":{},"sourceType":"script"}