{"ast":null,"code":"\"use strict\";\n/**\r\n * StyleLeakDetector.ts\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * Detects style memory-leaks in react-native.\r\n * To fix warning you could:\r\n *  - use not cached styles by providing cacheStyle == false to Style.create... method\r\n *  - for colors you could use StylesRegestry component\r\n *  - for rx component you could temporary disable validation by calling pause method and restore by calling resume,\r\n *    but please make sure that it doesn't leaks first please\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StyleLeakDetector = void 0;\n\nvar AppConfig_1 = require(\"./AppConfig\");\n\nvar lodashMini_1 = require(\"./lodashMini\");\n\nvar StyleLeakDetector =\n/** @class */\nfunction () {\n  function StyleLeakDetector() {\n    this._fingerprintRegistry = {};\n  }\n\n  StyleLeakDetector.prototype._getFingerprint = function (object) {\n    return JSON.stringify(this._sortAny(object));\n  };\n  /**\r\n   * We need to sort objects before using JSON.stringify as otherwise objects\r\n   * {a: 1, b: 2} and {b: 2, a: 1} would have a different fingerprints\r\n   */\n\n\n  StyleLeakDetector.prototype._sortAny = function (object) {\n    if (object instanceof Array) {\n      return this._sortArray(object);\n    } else if (object instanceof Object) {\n      return this._sortObject(object);\n    } else {\n      return object;\n    }\n  };\n\n  StyleLeakDetector.prototype._sortObject = function (object) {\n    var result = {};\n    var keys = [];\n\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n\n    keys = lodashMini_1.sortBy(keys);\n    var keysLength = keys.length;\n\n    for (var i = 0; i < keysLength; i++) {\n      var key = keys[i];\n      var value = object[key];\n      result[key] = this._sortAny(value);\n    }\n\n    return result;\n  };\n\n  StyleLeakDetector.prototype._sortArray = function (object) {\n    var length = object.length;\n\n    for (var i = 0; i < length; i++) {\n      object[i] = this._sortAny(object[i]);\n    }\n\n    return object;\n  };\n\n  StyleLeakDetector.prototype.isDisabled = function () {\n    return false;\n  };\n\n  StyleLeakDetector.prototype.detectLeaks = function (style) {\n    if (AppConfig_1.default.isDevelopmentMode() && !this.isDisabled()) {\n      var error = new Error(); // we detect leaks on chrome and firefox only, other browser have now this member\n\n      var stack = error.stack;\n\n      if (stack) {\n        var styleAllocationId = stack.toString() + this._getFingerprint(style);\n\n        var firstAllocation = this._fingerprintRegistry[styleAllocationId];\n\n        if (firstAllocation) {\n          console.warn('Possible style leak of: ', style, 'first allocation: ', firstAllocation);\n        } else {\n          this._fingerprintRegistry[styleAllocationId] = stack;\n        }\n      }\n    }\n  };\n\n  return StyleLeakDetector;\n}();\n\nexports.StyleLeakDetector = StyleLeakDetector;\nexports.default = new StyleLeakDetector();","map":{"version":3,"sources":["/Users/dangthang/Desktop/webStreamGame/node_modules/react-ult/dist/common/StyleLeakDetector.js"],"names":["Object","defineProperty","exports","value","StyleLeakDetector","AppConfig_1","require","lodashMini_1","_fingerprintRegistry","prototype","_getFingerprint","object","JSON","stringify","_sortAny","Array","_sortArray","_sortObject","result","keys","key","hasOwnProperty","push","sortBy","keysLength","length","i","isDisabled","detectLeaks","style","default","isDevelopmentMode","error","Error","stack","styleAllocationId","toString","firstAllocation","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * StyleLeakDetector.ts\r\n *\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n *\r\n * Detects style memory-leaks in react-native.\r\n * To fix warning you could:\r\n *  - use not cached styles by providing cacheStyle == false to Style.create... method\r\n *  - for colors you could use StylesRegestry component\r\n *  - for rx component you could temporary disable validation by calling pause method and restore by calling resume,\r\n *    but please make sure that it doesn't leaks first please\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StyleLeakDetector = void 0;\r\nvar AppConfig_1 = require(\"./AppConfig\");\r\nvar lodashMini_1 = require(\"./lodashMini\");\r\nvar StyleLeakDetector = /** @class */ (function () {\r\n    function StyleLeakDetector() {\r\n        this._fingerprintRegistry = {};\r\n    }\r\n    StyleLeakDetector.prototype._getFingerprint = function (object) {\r\n        return JSON.stringify(this._sortAny(object));\r\n    };\r\n    /**\r\n     * We need to sort objects before using JSON.stringify as otherwise objects\r\n     * {a: 1, b: 2} and {b: 2, a: 1} would have a different fingerprints\r\n     */\r\n    StyleLeakDetector.prototype._sortAny = function (object) {\r\n        if (object instanceof Array) {\r\n            return this._sortArray(object);\r\n        }\r\n        else if (object instanceof Object) {\r\n            return this._sortObject(object);\r\n        }\r\n        else {\r\n            return object;\r\n        }\r\n    };\r\n    StyleLeakDetector.prototype._sortObject = function (object) {\r\n        var result = {};\r\n        var keys = [];\r\n        for (var key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        keys = lodashMini_1.sortBy(keys);\r\n        var keysLength = keys.length;\r\n        for (var i = 0; i < keysLength; i++) {\r\n            var key = keys[i];\r\n            var value = object[key];\r\n            result[key] = this._sortAny(value);\r\n        }\r\n        return result;\r\n    };\r\n    StyleLeakDetector.prototype._sortArray = function (object) {\r\n        var length = object.length;\r\n        for (var i = 0; i < length; i++) {\r\n            object[i] = this._sortAny(object[i]);\r\n        }\r\n        return object;\r\n    };\r\n    StyleLeakDetector.prototype.isDisabled = function () {\r\n        return false;\r\n    };\r\n    StyleLeakDetector.prototype.detectLeaks = function (style) {\r\n        if (AppConfig_1.default.isDevelopmentMode() && !this.isDisabled()) {\r\n            var error = new Error();\r\n            // we detect leaks on chrome and firefox only, other browser have now this member\r\n            var stack = error.stack;\r\n            if (stack) {\r\n                var styleAllocationId = stack.toString() + this._getFingerprint(style);\r\n                var firstAllocation = this._fingerprintRegistry[styleAllocationId];\r\n                if (firstAllocation) {\r\n                    console.warn('Possible style leak of: ', style, 'first allocation: ', firstAllocation);\r\n                }\r\n                else {\r\n                    this._fingerprintRegistry[styleAllocationId] = stack;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return StyleLeakDetector;\r\n}());\r\nexports.StyleLeakDetector = StyleLeakDetector;\r\nexports.default = new StyleLeakDetector();\r\n"]},"metadata":{},"sourceType":"script"}