{"ast":null,"code":"\"use strict\";\n/**\r\n * https://github.com/gre/bezier-easing\r\n * BezierEasing - use bezier curve for transition easing function\r\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bezier = void 0; // These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n} // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n} // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  } // Precompute samples table\n\n\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample; // Interpolate to provide an initial guess for t\n\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    } // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexports.bezier = bezier;","map":{"version":3,"sources":["/Users/trungthang/webStreamGame/webStreamGame/node_modules/react-ult/dist/common/Bezier.js"],"names":["Object","defineProperty","exports","value","bezier","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * https://github.com/gre/bezier-easing\r\n * BezierEasing - use bezier curve for transition easing function\r\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.bezier = void 0;\r\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\r\nvar NEWTON_ITERATIONS = 4;\r\nvar NEWTON_MIN_SLOPE = 0.001;\r\nvar SUBDIVISION_PRECISION = 0.0000001;\r\nvar SUBDIVISION_MAX_ITERATIONS = 10;\r\nvar kSplineTableSize = 11;\r\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\r\nvar float32ArraySupported = typeof Float32Array === 'function';\r\nfunction A(aA1, aA2) {\r\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\r\n}\r\nfunction B(aA1, aA2) {\r\n    return 3.0 * aA2 - 6.0 * aA1;\r\n}\r\nfunction C(aA1) {\r\n    return 3.0 * aA1;\r\n}\r\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\r\nfunction calcBezier(aT, aA1, aA2) {\r\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\r\n}\r\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\r\nfunction getSlope(aT, aA1, aA2) {\r\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\r\n}\r\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\r\n    var currentX = 0;\r\n    var currentT = 0;\r\n    var i = 0;\r\n    do {\r\n        currentT = aA + (aB - aA) / 2.0;\r\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\r\n        if (currentX > 0.0) {\r\n            aB = currentT;\r\n        }\r\n        else {\r\n            aA = currentT;\r\n        }\r\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\r\n    return currentT;\r\n}\r\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\r\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\r\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\r\n        if (currentSlope === 0.0) {\r\n            return aGuessT;\r\n        }\r\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\r\n        aGuessT -= currentX / currentSlope;\r\n    }\r\n    return aGuessT;\r\n}\r\nfunction bezier(mX1, mY1, mX2, mY2) {\r\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\r\n        throw new Error('bezier x values must be in [0, 1] range');\r\n    }\r\n    // Precompute samples table\r\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\r\n    if (mX1 !== mY1 || mX2 !== mY2) {\r\n        for (var i = 0; i < kSplineTableSize; ++i) {\r\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\r\n        }\r\n    }\r\n    function getTForX(aX) {\r\n        var intervalStart = 0.0;\r\n        var currentSample = 1;\r\n        var lastSample = kSplineTableSize - 1;\r\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\r\n            intervalStart += kSampleStepSize;\r\n        }\r\n        --currentSample;\r\n        // Interpolate to provide an initial guess for t\r\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\r\n        var guessForT = intervalStart + dist * kSampleStepSize;\r\n        var initialSlope = getSlope(guessForT, mX1, mX2);\r\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\r\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\r\n        }\r\n        else if (initialSlope === 0.0) {\r\n            return guessForT;\r\n        }\r\n        else {\r\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\r\n        }\r\n    }\r\n    return function BezierEasing(x) {\r\n        if (mX1 === mY1 && mX2 === mY2) {\r\n            return x; // linear\r\n        }\r\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\r\n        if (x === 0) {\r\n            return 0;\r\n        }\r\n        if (x === 1) {\r\n            return 1;\r\n        }\r\n        return calcBezier(getTForX(x), mY1, mY2);\r\n    };\r\n}\r\nexports.bezier = bezier;\r\n"]},"metadata":{},"sourceType":"script"}