{"version":3,"file":"GridList.umd.js","sources":["../src/GridList.tsx"],"sourcesContent":["import React, {\n\tuseRef,\n\tuseMemo,\n\tuseState,\n\tuseEffect,\n\tRefObject,\n\tMutableRefObject,\n} from \"react\"\n\n/**\n * ============================================================================\n * Generic Types\n * ============================================================================\n */\n\ntype ConstRef<T> = Readonly<MutableRefObject<T>>\n\ninterface ElementSize {\n\twidth: number\n\theight: number\n}\n\ninterface ElementScroll {\n\tx: number\n\ty: number\n}\n\n/**\n * ============================================================================\n * Generic Utils\n * ============================================================================\n */\n\nfunction isSameElementSize(a: ElementSize, b: ElementSize) {\n\treturn a.width === b.width && a.height === b.height\n}\n\nfunction getWindowSize(): ElementSize {\n\treturn {\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight,\n\t}\n}\n\nfunction getElementSize(element: Element): ElementSize {\n\tlet rect = element.getBoundingClientRect()\n\treturn {\n\t\twidth: rect.width,\n\t\theight: rect.height,\n\t}\n}\n\nfunction isSameElementScroll(a: ElementScroll, b: ElementScroll) {\n\treturn a.x === b.x && a.y === b.y\n}\n\nfunction getWindowScroll(): ElementScroll {\n\treturn {\n\t\tx: window.scrollX,\n\t\ty: window.scrollY,\n\t}\n}\n\nfunction getElementOffset(element: Element) {\n\treturn window.scrollY + element.getBoundingClientRect().top\n}\n\n/**\n * ============================================================================\n * Utility Hooks\n * ============================================================================\n */\n\nfunction useConstRef<T>(value: T): ConstRef<T> {\n\tlet ref = useRef(value)\n\tref.current = value\n\treturn ref\n}\n\nfunction useWindowSize(): ElementSize {\n\tlet [windowSize, setWindowSize] = useState(() => getWindowSize())\n\tlet windowSizeRef = useConstRef(windowSize)\n\n\tuseEffect(() => {\n\t\tfunction onResize() {\n\t\t\tlet nextWindowSize = getWindowSize()\n\t\t\tif (!isSameElementSize(windowSizeRef.current, nextWindowSize)) {\n\t\t\t\tsetWindowSize(nextWindowSize)\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener(\"resize\", onResize)\n\t\treturn () => window.removeEventListener(\"resize\", onResize)\n\t}, [windowSizeRef])\n\n\treturn windowSize\n}\n\nfunction useElementSize(ref: RefObject<Element>): ElementSize | null {\n\tlet [elementSize, setElementSize] = useState(() => {\n\t\tif (ref.current) {\n\t\t\treturn getElementSize(ref.current)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t})\n\n\tlet elementSizeRef = useConstRef(elementSize)\n\n\tuseEffect(() => {\n\t\tlet observer = new ResizeObserver((entries) => {\n\t\t\tlet nextElementSize = getElementSize(entries[0].target)\n\t\t\tif (\n\t\t\t\telementSizeRef.current === null ||\n\t\t\t\t!isSameElementSize(elementSizeRef.current, nextElementSize)\n\t\t\t) {\n\t\t\t\tsetElementSize(nextElementSize)\n\t\t\t}\n\t\t})\n\t\tif (ref.current) observer.observe(ref.current)\n\t\treturn () => observer.disconnect()\n\t}, [ref])\n\n\treturn elementSize\n}\n\nfunction useWindowScroll(): ElementScroll {\n\tlet [scrollPosition, setScrollPosition] = useState(getWindowScroll())\n\tlet ref = useConstRef(scrollPosition)\n\n\tuseEffect(() => {\n\t\tfunction update() {\n\t\t\tlet nextScrollPosition = getWindowScroll()\n\t\t\tif (!isSameElementScroll(ref.current, nextScrollPosition)) {\n\t\t\t\tsetScrollPosition(nextScrollPosition)\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"scroll\", update)\n\t\twindow.addEventListener(\"resize\", update)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"scroll\", update)\n\t\t\twindow.removeEventListener(\"resize\", update)\n\t\t}\n\t}, [ref])\n\n\treturn scrollPosition\n}\n\nfunction useElementWindowOffset(ref: RefObject<HTMLElement>) {\n\tlet [elementOffset, setElementOffset] = useState(() => {\n\t\tif (ref.current) {\n\t\t\treturn getElementOffset(ref.current)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t})\n\n\tuseEffect(() => {\n\t\tlet observer = new ResizeObserver((entries) => {\n\t\t\tsetElementOffset(getElementOffset(entries[0].target))\n\t\t})\n\t\tif (ref.current) observer.observe(ref.current)\n\t\treturn () => observer.disconnect()\n\t}, [ref])\n\n\treturn elementOffset\n}\n\nfunction useIntersecting(ref: RefObject<HTMLElement>, rootMargin: string) {\n\tlet [intersecting, setIntersecting] = useState(false)\n\n\tuseEffect(() => {\n\t\tlet observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tsetIntersecting(entries[0].isIntersecting)\n\t\t\t},\n\t\t\t{ rootMargin },\n\t\t)\n\t\tif (ref.current) observer.observe(ref.current)\n\t\treturn () => observer.disconnect()\n\t}, [ref, rootMargin])\n\n\treturn intersecting\n}\n\n/**\n * ============================================================================\n * GridList Types\n * ============================================================================\n */\n\ninterface GridListItemData {\n\tkey: string\n\theight: number\n}\n\ninterface GridListEntry<P> {\n\titem: P\n\tdata: GridListItemData\n}\n\ninterface GridListConfigData<P> {\n\twindowMargin: number\n\tgridGap: number\n\tcolumnCount: number\n\tentries: GridListEntry<P>[]\n}\n\ninterface GridListContainerData {\n\twindowSize: ElementSize\n\telementSize: ElementSize | null\n\twindowScroll: ElementScroll\n\telementWindowOffset: number | null\n}\n\ninterface GridListCell<P> {\n\tkey: string\n\tcolumnNumber: number\n\trowNumber: number\n\toffset: number\n\theight: number\n\titem: P\n}\n\ninterface GridListLayoutData<P> {\n\ttotalHeight: number\n\tcells: GridListCell<P>[]\n}\n\ninterface GridListRenderData<P> {\n\tcellsToRender: GridListCell<P>[]\n\tfirstRenderedRowNumber: number | null\n\tfirstRenderedRowOffset: number | null\n}\n\n/**\n * ============================================================================\n * GridList Utils\n * ============================================================================\n */\n\nfunction getColumnWidth(\n\tcolumnCount: number | null,\n\tgridGap: number | null,\n\telementWidth: number | null,\n) {\n\tif (columnCount === null || gridGap === null || elementWidth === null) {\n\t\treturn null\n\t}\n\n\tlet totalGapSpace = (columnCount - 1) * gridGap\n\tlet columnWidth = Math.round((elementWidth - totalGapSpace) / columnCount)\n\n\treturn columnWidth\n}\n\nfunction getGridRowStart<P>(\n\tcell: GridListCell<P>,\n\trenderData: GridListRenderData<P> | null,\n) {\n\tif (renderData === null) return undefined\n\n\tlet offset =\n\t\trenderData.firstRenderedRowNumber !== null\n\t\t\t? renderData.firstRenderedRowNumber - 1\n\t\t\t: 0\n\tlet gridRowStart = cell.rowNumber - offset\n\n\treturn `${gridRowStart}`\n}\n\n/**\n * ============================================================================\n * GridList Hooks\n * ============================================================================\n */\n\nfunction useGridListContainerData(\n\tref: RefObject<HTMLElement>,\n): GridListContainerData {\n\tlet windowSize = useWindowSize()\n\tlet windowScroll = useWindowScroll()\n\tlet elementWindowOffset = useElementWindowOffset(ref)\n\tlet elementSize = useElementSize(ref)\n\n\treturn useMemo(() => {\n\t\treturn {\n\t\t\twindowSize,\n\t\t\twindowScroll,\n\t\t\telementWindowOffset,\n\t\t\telementSize,\n\t\t}\n\t}, [windowSize, windowScroll, elementWindowOffset, elementSize])\n}\n\nfunction useGridListConfigData<P>(\n\tcontainerData: GridListContainerData,\n\tprops: GridListProps<P>,\n): GridListConfigData<P> | null {\n\tlet {\n\t\titems,\n\t\tgetWindowMargin,\n\t\tgetGridGap,\n\t\tgetColumnCount,\n\t\tgetItemData,\n\t} = props\n\n\tlet elementWidth = containerData.elementSize\n\t\t? containerData.elementSize.width\n\t\t: null\n\n\tlet windowMargin = useMemo(() => {\n\t\tif (getWindowMargin) {\n\t\t\treturn getWindowMargin(containerData.windowSize.height)\n\t\t} else {\n\t\t\treturn containerData.windowSize.height\n\t\t}\n\t}, [containerData.windowSize.height, getWindowMargin])\n\n\tlet gridGap = useMemo(() => {\n\t\tif (elementWidth === null) return null\n\t\tif (getGridGap) {\n\t\t\treturn getGridGap(elementWidth, containerData.windowSize.height)\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}, [elementWidth, containerData.windowSize.height, getGridGap])\n\n\tlet columnCount = useMemo(() => {\n\t\tif (elementWidth === null) return null\n\t\tif (gridGap === null) return null\n\t\treturn getColumnCount(elementWidth, gridGap)\n\t}, [getColumnCount, elementWidth, gridGap])\n\n\tlet columnWidth = getColumnWidth(columnCount, gridGap, elementWidth)\n\n\tlet entries = useMemo(() => {\n\t\tif (columnWidth === null) return null\n\t\tlet safeColumnWidth = columnWidth\n\t\treturn items.map((item) => {\n\t\t\treturn {\n\t\t\t\tdata: getItemData(item, safeColumnWidth),\n\t\t\t\titem,\n\t\t\t}\n\t\t})\n\t}, [items, columnWidth, getItemData])\n\n\treturn useMemo(() => {\n\t\tif (\n\t\t\twindowMargin === null ||\n\t\t\tgridGap === null ||\n\t\t\tcolumnCount === null ||\n\t\t\tentries === null\n\t\t) {\n\t\t\treturn null\n\t\t}\n\t\treturn {\n\t\t\twindowMargin,\n\t\t\tgridGap,\n\t\t\tcolumnCount,\n\t\t\tentries,\n\t\t}\n\t}, [windowMargin, gridGap, columnCount, entries])\n}\n\nfunction useGridListLayoutData<P>(\n\tconfigData: GridListConfigData<P> | null,\n): GridListLayoutData<P> | null {\n\treturn useMemo(() => {\n\t\tif (configData === null) return null\n\n\t\tlet currentRowNumber = 1\n\t\tlet prevRowsTotalHeight = 0\n\t\tlet currentRowMaxHeight = 0\n\n\t\tlet cells = configData.entries.map((entry, index) => {\n\t\t\tlet key = entry.data.key\n\n\t\t\tlet columnNumber = (index % configData.columnCount) + 1\n\t\t\tlet rowNumber = Math.floor(index / configData.columnCount) + 1\n\n\t\t\tif (rowNumber !== currentRowNumber) {\n\t\t\t\tcurrentRowNumber = rowNumber\n\t\t\t\tprevRowsTotalHeight += currentRowMaxHeight + configData.gridGap\n\t\t\t\tcurrentRowMaxHeight = 0\n\t\t\t}\n\n\t\t\tlet offset = prevRowsTotalHeight\n\t\t\tlet height = Math.round(entry.data.height)\n\n\t\t\tcurrentRowMaxHeight = Math.max(currentRowMaxHeight, height)\n\n\t\t\treturn { key, columnNumber, rowNumber, offset, height, item: entry.item }\n\t\t})\n\n\t\tlet totalHeight = prevRowsTotalHeight + currentRowMaxHeight\n\n\t\treturn { totalHeight, cells }\n\t}, [configData])\n}\n\nfunction useGridListRenderData<P>(\n\tcontainerData: GridListContainerData,\n\tconfigData: GridListConfigData<P> | null,\n\tlayoutData: GridListLayoutData<P> | null,\n): GridListRenderData<P> | null {\n\treturn useMemo(() => {\n\t\tif (layoutData === null || configData === null) return null\n\t\tlet cellsToRender: GridListCell<P>[] = []\n\t\tlet firstRenderedRowNumber: null | number = null\n\t\tlet firstRenderedRowOffset: null | number = null\n\n\t\tif (containerData.elementWindowOffset !== null) {\n\t\t\tlet elementWindowOffset = containerData.elementWindowOffset\n\n\t\t\tfor (let cell of layoutData.cells) {\n\t\t\t\tlet cellTop = elementWindowOffset + cell.offset\n\t\t\t\tlet cellBottom = cellTop + cell.height\n\n\t\t\t\tlet windowTop = containerData.windowScroll.y\n\t\t\t\tlet windowBottom = windowTop + containerData.windowSize.height\n\n\t\t\t\tlet renderTop = windowTop - configData.windowMargin\n\t\t\t\tlet renderBottom = windowBottom + configData.windowMargin\n\n\t\t\t\tif (cellTop > renderBottom) continue\n\t\t\t\tif (cellBottom < renderTop) continue\n\n\t\t\t\tif (firstRenderedRowNumber === null) {\n\t\t\t\t\tfirstRenderedRowNumber = cell.rowNumber\n\t\t\t\t}\n\n\t\t\t\tif (cell.rowNumber === firstRenderedRowNumber) {\n\t\t\t\t\tfirstRenderedRowOffset = firstRenderedRowOffset\n\t\t\t\t\t\t? Math.min(firstRenderedRowOffset, cell.offset)\n\t\t\t\t\t\t: cell.offset\n\t\t\t\t}\n\n\t\t\t\tcellsToRender.push(cell)\n\t\t\t}\n\t\t}\n\n\t\treturn { cellsToRender, firstRenderedRowNumber, firstRenderedRowOffset }\n\t}, [\n\t\tlayoutData,\n\t\tconfigData,\n\t\tcontainerData.windowScroll.y,\n\t\tcontainerData.windowSize.height,\n\t\tcontainerData.elementWindowOffset,\n\t])\n}\n\n/**\n * ============================================================================\n * GridList\n * ============================================================================\n */\n\nexport interface GridListProps<P> {\n\titems: P[]\n\tgetGridGap?: (elementWidth: number, windowHeight: number) => number\n\tgetWindowMargin?: (windowHeight: number) => number\n\tgetColumnCount: (elementWidth: number, gridGap: number) => number\n\tgetItemData: (item: P, columnWidth: number) => GridListItemData\n\trenderItem: (item: P) => React.ReactNode\n\tfixedColumnWidth?: number\n}\n\nexport default function GridList<P>(props: GridListProps<P>) {\n\tlet ref = useRef<HTMLDivElement>(null)\n\n\tlet containerData = useGridListContainerData(ref)\n\tlet configData = useGridListConfigData(containerData, props)\n\tlet layoutData = useGridListLayoutData(configData)\n\tlet renderData = useGridListRenderData(containerData, configData, layoutData)\n\n\tlet intersecting = useIntersecting(\n\t\tref,\n\t\t`${configData !== null ? configData.windowMargin : 0}px`,\n\t)\n\n\tconst colWidth = props.fixedColumnWidth\n\t\t? `${props.fixedColumnWidth}px`\n\t\t: \"1fr\"\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tstyle={{\n\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\theight: layoutData !== null ? layoutData.totalHeight : undefined,\n\t\t\t\tpaddingTop:\n\t\t\t\t\trenderData !== null && renderData.firstRenderedRowOffset !== null\n\t\t\t\t\t\t? renderData.firstRenderedRowOffset\n\t\t\t\t\t\t: 0,\n\t\t\t}}\n\t\t>\n\t\t\t{intersecting && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\t\tgridTemplateColumns:\n\t\t\t\t\t\t\tconfigData !== null\n\t\t\t\t\t\t\t\t? `repeat(${configData.columnCount}, ${colWidth})`\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tgridGap: configData ? configData.gridGap : undefined,\n\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{renderData !== null &&\n\t\t\t\t\t\trenderData.cellsToRender.map((cell) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={cell.key}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\theight: cell.height,\n\t\t\t\t\t\t\t\t\t\tgridColumnStart: `${cell.columnNumber}`,\n\t\t\t\t\t\t\t\t\t\tgridRowStart: getGridRowStart(cell, renderData),\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{props.renderItem(cell.item)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n"],"names":["isSameElementSize","a","b","width","height","getWindowSize","window","innerWidth","innerHeight","getElementSize","element","rect","getBoundingClientRect","getWindowScroll","x","scrollX","y","scrollY","getElementOffset","top","useConstRef","value","ref","useRef","current","getGridRowStart","cell","renderData","rowNumber","firstRenderedRowNumber","props","containerData","windowSize","useState","windowSizeRef","useEffect","onResize","nextWindowSize","setWindowSize","addEventListener","removeEventListener","useWindowSize","windowScroll","scrollPosition","update","nextScrollPosition","setScrollPosition","useWindowScroll","elementWindowOffset","observer","ResizeObserver","entries","setElementOffset","target","observe","disconnect","elementOffset","useElementWindowOffset","elementSize","elementSizeRef","nextElementSize","setElementSize","useElementSize","useMemo","useGridListContainerData","configData","items","elementWidth","windowMargin","getWindowMargin","gridGap","getGridGap","columnCount","getColumnCount","columnWidth","Math","round","getColumnWidth","safeColumnWidth","map","item","data","getItemData","useGridListConfigData","layoutData","currentRowNumber","prevRowsTotalHeight","currentRowMaxHeight","cells","entry","index","key","columnNumber","floor","offset","max","useGridListLayoutData","cellsToRender","firstRenderedRowOffset","let","cellTop","windowTop","min","push","useGridListRenderData","intersecting","rootMargin","IntersectionObserver","setIntersecting","isIntersecting","useIntersecting","React","style","boxSizing","totalHeight","undefined","paddingTop","display","gridTemplateColumns","fixedColumnWidth","justifyContent","alignItems","gridColumnStart","gridRowStart","renderItem"],"mappings":"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"}